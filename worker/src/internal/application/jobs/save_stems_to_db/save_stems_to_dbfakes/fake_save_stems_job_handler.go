// Code generated by counterfeiter. DO NOT EDIT.
package save_stems_to_dbfakes

import (
	"github.com/veedubyou/chord-paper-be/worker/src/internal/application/jobs/save_stems_to_db"
	"sync"
)

type FakeSaveStemsJobHandler struct {
	HandleSaveStemsToDBJobStub        func([]byte) error
	handleSaveStemsToDBJobMutex       sync.RWMutex
	handleSaveStemsToDBJobArgsForCall []struct {
		arg1 []byte
	}
	handleSaveStemsToDBJobReturns struct {
		result1 error
	}
	handleSaveStemsToDBJobReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSaveStemsJobHandler) HandleSaveStemsToDBJob(arg1 []byte) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.handleSaveStemsToDBJobMutex.Lock()
	ret, specificReturn := fake.handleSaveStemsToDBJobReturnsOnCall[len(fake.handleSaveStemsToDBJobArgsForCall)]
	fake.handleSaveStemsToDBJobArgsForCall = append(fake.handleSaveStemsToDBJobArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.HandleSaveStemsToDBJobStub
	fakeReturns := fake.handleSaveStemsToDBJobReturns
	fake.recordInvocation("HandleSaveStemsToDBJob", []interface{}{arg1Copy})
	fake.handleSaveStemsToDBJobMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSaveStemsJobHandler) HandleSaveStemsToDBJobCallCount() int {
	fake.handleSaveStemsToDBJobMutex.RLock()
	defer fake.handleSaveStemsToDBJobMutex.RUnlock()
	return len(fake.handleSaveStemsToDBJobArgsForCall)
}

func (fake *FakeSaveStemsJobHandler) HandleSaveStemsToDBJobCalls(stub func([]byte) error) {
	fake.handleSaveStemsToDBJobMutex.Lock()
	defer fake.handleSaveStemsToDBJobMutex.Unlock()
	fake.HandleSaveStemsToDBJobStub = stub
}

func (fake *FakeSaveStemsJobHandler) HandleSaveStemsToDBJobArgsForCall(i int) []byte {
	fake.handleSaveStemsToDBJobMutex.RLock()
	defer fake.handleSaveStemsToDBJobMutex.RUnlock()
	argsForCall := fake.handleSaveStemsToDBJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSaveStemsJobHandler) HandleSaveStemsToDBJobReturns(result1 error) {
	fake.handleSaveStemsToDBJobMutex.Lock()
	defer fake.handleSaveStemsToDBJobMutex.Unlock()
	fake.HandleSaveStemsToDBJobStub = nil
	fake.handleSaveStemsToDBJobReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSaveStemsJobHandler) HandleSaveStemsToDBJobReturnsOnCall(i int, result1 error) {
	fake.handleSaveStemsToDBJobMutex.Lock()
	defer fake.handleSaveStemsToDBJobMutex.Unlock()
	fake.HandleSaveStemsToDBJobStub = nil
	if fake.handleSaveStemsToDBJobReturnsOnCall == nil {
		fake.handleSaveStemsToDBJobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.handleSaveStemsToDBJobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSaveStemsJobHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleSaveStemsToDBJobMutex.RLock()
	defer fake.handleSaveStemsToDBJobMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSaveStemsJobHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ save_stems_to_db.SaveStemsJobHandler = new(FakeSaveStemsJobHandler)
