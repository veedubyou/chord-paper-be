// Code generated by counterfeiter. DO NOT EDIT.
package splitfakes

import (
	"github.com/veedubyou/chord-paper-be/worker/src/internal/application/jobs/split"
	"sync"
)

type FakeSplitJobHandler struct {
	HandleSplitJobStub        func([]byte) (split.JobParams, map[string]string, error)
	handleSplitJobMutex       sync.RWMutex
	handleSplitJobArgsForCall []struct {
		arg1 []byte
	}
	handleSplitJobReturns struct {
		result1 split.JobParams
		result2 map[string]string
		result3 error
	}
	handleSplitJobReturnsOnCall map[int]struct {
		result1 split.JobParams
		result2 map[string]string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSplitJobHandler) HandleSplitJob(arg1 []byte) (split.JobParams, map[string]string, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.handleSplitJobMutex.Lock()
	ret, specificReturn := fake.handleSplitJobReturnsOnCall[len(fake.handleSplitJobArgsForCall)]
	fake.handleSplitJobArgsForCall = append(fake.handleSplitJobArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.HandleSplitJobStub
	fakeReturns := fake.handleSplitJobReturns
	fake.recordInvocation("HandleSplitJob", []interface{}{arg1Copy})
	fake.handleSplitJobMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeSplitJobHandler) HandleSplitJobCallCount() int {
	fake.handleSplitJobMutex.RLock()
	defer fake.handleSplitJobMutex.RUnlock()
	return len(fake.handleSplitJobArgsForCall)
}

func (fake *FakeSplitJobHandler) HandleSplitJobCalls(stub func([]byte) (split.JobParams, map[string]string, error)) {
	fake.handleSplitJobMutex.Lock()
	defer fake.handleSplitJobMutex.Unlock()
	fake.HandleSplitJobStub = stub
}

func (fake *FakeSplitJobHandler) HandleSplitJobArgsForCall(i int) []byte {
	fake.handleSplitJobMutex.RLock()
	defer fake.handleSplitJobMutex.RUnlock()
	argsForCall := fake.handleSplitJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSplitJobHandler) HandleSplitJobReturns(result1 split.JobParams, result2 map[string]string, result3 error) {
	fake.handleSplitJobMutex.Lock()
	defer fake.handleSplitJobMutex.Unlock()
	fake.HandleSplitJobStub = nil
	fake.handleSplitJobReturns = struct {
		result1 split.JobParams
		result2 map[string]string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSplitJobHandler) HandleSplitJobReturnsOnCall(i int, result1 split.JobParams, result2 map[string]string, result3 error) {
	fake.handleSplitJobMutex.Lock()
	defer fake.handleSplitJobMutex.Unlock()
	fake.HandleSplitJobStub = nil
	if fake.handleSplitJobReturnsOnCall == nil {
		fake.handleSplitJobReturnsOnCall = make(map[int]struct {
			result1 split.JobParams
			result2 map[string]string
			result3 error
		})
	}
	fake.handleSplitJobReturnsOnCall[i] = struct {
		result1 split.JobParams
		result2 map[string]string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSplitJobHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleSplitJobMutex.RLock()
	defer fake.handleSplitJobMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSplitJobHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ split.SplitJobHandler = new(FakeSplitJobHandler)
