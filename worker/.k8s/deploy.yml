apiVersion: apps/v1
kind: Deployment
metadata:
  name: chord-be-workers
  labels:
    app: chord-be-workers
spec:
  replicas: 1
  selector: 
    matchLabels:
      app: chord-be-workers
  template:
    metadata:
      labels:
        app: chord-be-workers
      annotations:
        restartedAt: '2006-01-02T15:04:05Z07:00'
    spec:
      containers:
      - name: chord-be-workers
        image: pw1124/chord-be-workers:latest
        env:
        - name: ENVIRONMENT
          value: production
        - name: SPLEETER_BIN_PATH
          value: /usr/local/bin/spleeter
        - name: SPLEETER_WORKING_DIR_PATH
          value: /spleeter-scratch
        - name: YOUTUBEDL_BIN_PATH
          value: /shared/youtube-dl
        - name: YOUTUBEDL_WORKING_DIR_PATH
          value: /youtubedl-scratch
        - name: GOOGLE_CLOUD_STORAGE_BUCKET_NAME
          value: chord-paper-tracks
        - name: RABBITMQ_QUEUE_NAME
          value: chord-paper-tracks
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-dynamodb
              key: access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-dynamodb
              key: secret_access_key
        - name: RABBITMQ_URL
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: rabbitmq_url
        - name: GOOGLE_CLOUD_KEY
          valueFrom:
            secretKeyRef:
              name: google-cloud-key
              key: key
        volumeMounts:
        - mountPath: /shared
          name: cache-volume
      initContainers:
      - name: youtube-dl-bin
        image: pw1124/youtube-dl-bin:latest
       # tty: true
        volumeMounts:
        - mountPath: /youtube-dl
          name: cache-volume
        command: ["/bin/sh"]
        args: ["-c", "mv /home/youtube-dl /youtube-dl/"]
      nodeSelector:
        ram: 8gb
      volumes:
      - name: cache-volume
        emptyDir: {}
      imagePullSecrets:
      - name: regcred

# to create `regcred`, you need a dockerhub account,
# and then run: `kubectl create secret generic regcred \
#                  --from-file=.dockerconfigjson=[path/to/.docker/config.json] \
#                  --type=kubernetes.io/dockerconfigjson`
#
# you can then inspect it by: `kubectl get secret regcred \
#                                --output="jsonpath={.data.\.dockerconfigjson}" | base64 â€“decode
