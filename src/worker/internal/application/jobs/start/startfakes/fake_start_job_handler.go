// Code generated by counterfeiter. DO NOT EDIT.
package startfakes

import (
	"github.com/veedubyou/chord-paper-be/src/worker/internal/application/jobs/start"
	"sync"
)

type FakeStartJobHandler struct {
	HandleStartJobStub        func([]byte) (start.JobParams, error)
	handleStartJobMutex       sync.RWMutex
	handleStartJobArgsForCall []struct {
		arg1 []byte
	}
	handleStartJobReturns struct {
		result1 start.JobParams
		result2 error
	}
	handleStartJobReturnsOnCall map[int]struct {
		result1 start.JobParams
		result2 error
	}
	invocations      map[string][][]any
	invocationsMutex sync.RWMutex
}

func (fake *FakeStartJobHandler) HandleStartJob(arg1 []byte) (start.JobParams, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.handleStartJobMutex.Lock()
	ret, specificReturn := fake.handleStartJobReturnsOnCall[len(fake.handleStartJobArgsForCall)]
	fake.handleStartJobArgsForCall = append(fake.handleStartJobArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.HandleStartJobStub
	fakeReturns := fake.handleStartJobReturns
	fake.recordInvocation("HandleStartJob", []any{arg1Copy})
	fake.handleStartJobMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStartJobHandler) HandleStartJobCallCount() int {
	fake.handleStartJobMutex.RLock()
	defer fake.handleStartJobMutex.RUnlock()
	return len(fake.handleStartJobArgsForCall)
}

func (fake *FakeStartJobHandler) HandleStartJobCalls(stub func([]byte) (start.JobParams, error)) {
	fake.handleStartJobMutex.Lock()
	defer fake.handleStartJobMutex.Unlock()
	fake.HandleStartJobStub = stub
}

func (fake *FakeStartJobHandler) HandleStartJobArgsForCall(i int) []byte {
	fake.handleStartJobMutex.RLock()
	defer fake.handleStartJobMutex.RUnlock()
	argsForCall := fake.handleStartJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStartJobHandler) HandleStartJobReturns(result1 start.JobParams, result2 error) {
	fake.handleStartJobMutex.Lock()
	defer fake.handleStartJobMutex.Unlock()
	fake.HandleStartJobStub = nil
	fake.handleStartJobReturns = struct {
		result1 start.JobParams
		result2 error
	}{result1, result2}
}

func (fake *FakeStartJobHandler) HandleStartJobReturnsOnCall(i int, result1 start.JobParams, result2 error) {
	fake.handleStartJobMutex.Lock()
	defer fake.handleStartJobMutex.Unlock()
	fake.HandleStartJobStub = nil
	if fake.handleStartJobReturnsOnCall == nil {
		fake.handleStartJobReturnsOnCall = make(map[int]struct {
			result1 start.JobParams
			result2 error
		})
	}
	fake.handleStartJobReturnsOnCall[i] = struct {
		result1 start.JobParams
		result2 error
	}{result1, result2}
}

func (fake *FakeStartJobHandler) Invocations() map[string][][]any {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleStartJobMutex.RLock()
	defer fake.handleStartJobMutex.RUnlock()
	copiedInvocations := map[string][][]any{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStartJobHandler) recordInvocation(key string, args []any) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]any{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]any{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ start.StartJobHandler = new(FakeStartJobHandler)
