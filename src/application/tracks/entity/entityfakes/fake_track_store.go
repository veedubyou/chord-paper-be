// Code generated by counterfeiter. DO NOT EDIT.
package entityfakes

import (
	"chord-paper-be-workers/src/application/tracks/entity"
	"context"
	"sync"
)

type FakeTrackStore struct {
	GetTrackStub        func(context.Context, string, string) (entity.Track, error)
	getTrackMutex       sync.RWMutex
	getTrackArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getTrackReturns struct {
		result1 entity.Track
		result2 error
	}
	getTrackReturnsOnCall map[int]struct {
		result1 entity.Track
		result2 error
	}
	PutTrackStub        func(context.Context, string, string, entity.Track) error
	putTrackMutex       sync.RWMutex
	putTrackArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 entity.Track
	}
	putTrackReturns struct {
		result1 error
	}
	putTrackReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTrackStore) GetTrack(arg1 context.Context, arg2 string, arg3 string) (entity.Track, error) {
	fake.getTrackMutex.Lock()
	ret, specificReturn := fake.getTrackReturnsOnCall[len(fake.getTrackArgsForCall)]
	fake.getTrackArgsForCall = append(fake.getTrackArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetTrackStub
	fakeReturns := fake.getTrackReturns
	fake.recordInvocation("GetTrack", []interface{}{arg1, arg2, arg3})
	fake.getTrackMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTrackStore) GetTrackCallCount() int {
	fake.getTrackMutex.RLock()
	defer fake.getTrackMutex.RUnlock()
	return len(fake.getTrackArgsForCall)
}

func (fake *FakeTrackStore) GetTrackCalls(stub func(context.Context, string, string) (entity.Track, error)) {
	fake.getTrackMutex.Lock()
	defer fake.getTrackMutex.Unlock()
	fake.GetTrackStub = stub
}

func (fake *FakeTrackStore) GetTrackArgsForCall(i int) (context.Context, string, string) {
	fake.getTrackMutex.RLock()
	defer fake.getTrackMutex.RUnlock()
	argsForCall := fake.getTrackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeTrackStore) GetTrackReturns(result1 entity.Track, result2 error) {
	fake.getTrackMutex.Lock()
	defer fake.getTrackMutex.Unlock()
	fake.GetTrackStub = nil
	fake.getTrackReturns = struct {
		result1 entity.Track
		result2 error
	}{result1, result2}
}

func (fake *FakeTrackStore) GetTrackReturnsOnCall(i int, result1 entity.Track, result2 error) {
	fake.getTrackMutex.Lock()
	defer fake.getTrackMutex.Unlock()
	fake.GetTrackStub = nil
	if fake.getTrackReturnsOnCall == nil {
		fake.getTrackReturnsOnCall = make(map[int]struct {
			result1 entity.Track
			result2 error
		})
	}
	fake.getTrackReturnsOnCall[i] = struct {
		result1 entity.Track
		result2 error
	}{result1, result2}
}

func (fake *FakeTrackStore) PutTrack(arg1 context.Context, arg2 string, arg3 string, arg4 entity.Track) error {
	fake.putTrackMutex.Lock()
	ret, specificReturn := fake.putTrackReturnsOnCall[len(fake.putTrackArgsForCall)]
	fake.putTrackArgsForCall = append(fake.putTrackArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 entity.Track
	}{arg1, arg2, arg3, arg4})
	stub := fake.PutTrackStub
	fakeReturns := fake.putTrackReturns
	fake.recordInvocation("PutTrack", []interface{}{arg1, arg2, arg3, arg4})
	fake.putTrackMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeTrackStore) PutTrackCallCount() int {
	fake.putTrackMutex.RLock()
	defer fake.putTrackMutex.RUnlock()
	return len(fake.putTrackArgsForCall)
}

func (fake *FakeTrackStore) PutTrackCalls(stub func(context.Context, string, string, entity.Track) error) {
	fake.putTrackMutex.Lock()
	defer fake.putTrackMutex.Unlock()
	fake.PutTrackStub = stub
}

func (fake *FakeTrackStore) PutTrackArgsForCall(i int) (context.Context, string, string, entity.Track) {
	fake.putTrackMutex.RLock()
	defer fake.putTrackMutex.RUnlock()
	argsForCall := fake.putTrackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeTrackStore) PutTrackReturns(result1 error) {
	fake.putTrackMutex.Lock()
	defer fake.putTrackMutex.Unlock()
	fake.PutTrackStub = nil
	fake.putTrackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTrackStore) PutTrackReturnsOnCall(i int, result1 error) {
	fake.putTrackMutex.Lock()
	defer fake.putTrackMutex.Unlock()
	fake.PutTrackStub = nil
	if fake.putTrackReturnsOnCall == nil {
		fake.putTrackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putTrackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeTrackStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTrackMutex.RLock()
	defer fake.getTrackMutex.RUnlock()
	fake.putTrackMutex.RLock()
	defer fake.putTrackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTrackStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ entity.TrackStore = new(FakeTrackStore)
